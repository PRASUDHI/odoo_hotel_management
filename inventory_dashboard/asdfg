you are seeing come from two separate issues:

1️⃣ Owl Error: “Component does not have a static props description”

In Owl 2.x (Odoo 16+), if you define a component with no props, you need to explicitly set an empty static props object. Otherwise, Owl expects one by default and throws the error.

Fix:

class InventoryDashboard extends Component {
    static props = {};  // ← Add this line

    setup() {
        this.state = useState({
            data: {},
            filters: { year: new Date().getFullYear() },
        });

        onWillStart(async () => {
            await this.loadData();
        });

        onMounted(() => {
            this.renderCharts();
        });
    }

    // ... rest of your code
}

2️⃣ Template Error: “Cannot read properties of undefined (reading 'range')”

This usually means your QWeb template is trying to access state.filters.range or a property that doesn’t exist yet. In your JS, the filters object only has { year } by default, so if your template expects filters.month or filters.week, it will fail.

Fix:

Make sure your template checks for existence before using:

<t t-if="state.filters && state.filters.month">
    <span>Month: <t t-esc="state.filters.month"/></span>
</t>


Or define defaults in JS:

this.state = useState({
    data: {},
    filters: {
        year: new Date().getFullYear(),
        month: null,
        week: null
    }
});


This prevents undefined errors in template expressions.

✅ Corrected JS Skeleton
/** @odoo-module **/
import { registry } from "@web/core/registry";
import { Component, onWillStart, onMounted, useState } from "@odoo/owl";
import { rpc } from "@web/core/network/rpc";

class InventoryDashboard extends Component {
    static props = {}; // Required in Owl

    setup() {
        this.state = useState({
            data: {},
            filters: { year: new Date().getFullYear(), month: null, week: null },
        });

        onWillStart(async () => {
            await this.loadData();
        });

        onMounted(() => {
            this.renderCharts();
        });
    }

    async loadData() {
        this.state.data = await rpc("/inventory/dashboard/data", { filters: this.state.filters });
    }

    async onFilterChange(ev) {
        const name = ev.target.name;
        const value = ev.target.value;
        this.state.filters[name] = value || null;
        await this.loadData();
        this.renderCharts();
    }

    renderCharts() {
        // ...same as before, with safety checks for all canvas elements
    }
}

InventoryDashboard.template = "inventory_dashboard.InventoryDashboard";
registry.category("actions").add("inventory_dashboard_tag", InventoryDashboard);


If you want, I can rewrite your QWeb template so it matches this JS, avoids all undefined errors, and works with the year/month/week filters dynamically.

Do you want me to do that next?

Tools