<?xml version="1.0" encoding="UTF-8" ?>
<template id="hotel_gallery_template" xml:space="preserve">
    <t t-name="hotel_management.hotel_gallery_template">
        <section class="hotel-gallery-section my-5">
            <div class="container">
                <h2 class="text-center mb-4 text-primary">Hotel Gallery</h2>
                <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="3000">
                    <div class="carousel-inner">
                        <t t-foreach="result.images" t-as="img" t-key="img.id" t-foreach-index="img_index">
                            <div t-if="img_index == 0" class="carousel-item active">
                                <img t-att-src="img.url"
                                     class="d-block w-100 rounded"
                                     t-att-alt="img.name"
                                     style="height: 400px; object-fit: cover;"/>
                                <div class="carousel-caption d-none d-md-block">
                                    <h5><t t-esc="img.name"/></h5>
                                </div>
                            </div>
                            <div t-else="" class="carousel-item">
                                <img t-att-src="img.url"
                                     class="d-block w-100 rounded"
                                     t-att-alt="img.name"
                                     style="height: 400px; object-fit: cover;"/>
                                <div class="carousel-caption d-none d-md-block">
                                    <h5><t t-esc="img.name"/></h5>
                                </div>
                            </div>
                        </t>
                    </div>

                    <!-- Controls -->
                    <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
        </section>
    </t>
</template>


mal carousel that scrolls one image at a time, you want it to show 5 images per slide (like a chunked gallery) and then slide to the next 5, and so on.

In Odoo QWeb you can achieve this by chunking the records into groups of 5.

Here‚Äôs how you can fix it:

‚úÖ QWeb Template (hotel_gallery_template)
<t t-name="hotel_management.hotel_gallery_template">
  <section class="hotel-gallery-section my-5">
    <div class="container">
      <h2 class="text-center mb-4 text-primary">Hotel Gallery</h2>
      <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="3000">

        <!-- Carousel Inner -->
        <div class="carousel-inner">
          <t t-set="chunks" t-value="chunk(result.images, 5)"/>
          <t t-foreach="chunks" t-as="chunk" t-foreach-index="chunk_index">
            <div class="carousel-item" t-att-class="chunk_index == 0 and 'active' or ''">
              <div class="row">
                <t t-foreach="chunk" t-as="img">
                  <div class="col-md-2 col-6 mb-3">
                    <img t-att-src="img.url" class="d-block w-100 rounded" t-att-alt="img.name" style="height:200px; object-fit:cover;"/>
                    <div class="text-center mt-2">
                      <small><t t-esc="img.name"/></small>
                    </div>
                  </div>
                </t>
              </div>
            </div>
          </t>
        </div>

        <!-- Controls -->
        <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
          <span class="carousel-control-prev-icon"/>
          <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
          <span class="carousel-control-next-icon"/>
          <span class="visually-hidden">Next</span>
        </button>
      </div>
    </div>
  </section>
</t>

‚úÖ Python Helper (Controller)

In your controller, pass the chunk function to the template context:

from odoo import http
from odoo.http import request

def chunk(lst, n):
    """Yield successive n-sized chunks from list."""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

class HotelGalleryController(http.Controller):

    @http.route('/hotel/gallery', type='json', auth='public', website=True)
    def get_gallery_images(self):
        images = request.env['hotel.gallery'].sudo().search([])
        result = []
        for img in images:
            result.append({
                'id': img.id,
                'name': img.name,
                'url': '/web/image/hotel.gallery/%s/image_1920' % img.id,
            })
        return {
            'images': result,
            'chunk': chunk,
        }

üîë Key Points

Each slide will contain 5 images (chunk(result.images, 5)).

Bootstrap row + col-md-2 ensures 5 images fit per row.

Carousel auto-slides every 3 seconds (data-bs-interval="3000").

Works even if you have less than 5 images (last chunk will show remaining).

üëâ Do you want me to also write the snippet JS (publicWidget) so this gallery loads automatically from /hotel/gallery into the website, or are you directly using this inside a custom QWeb page?

Tools












. Right now your snippet loads images one by one, but you want 5 images per slide (like a chunked carousel).

We‚Äôll fix this by:

Returning all images (not just limit=5) from your controller.

Using QWeb chunking logic to group them in sets of 5.

‚úÖ Controller (fix limit)
@http.route('/get_hotel_gallery', type='json', auth="public", website=True)
def get_hotel_gallery(self):
    images = request.env['hotel.gallery'].sudo().search_read(
        [('id', '!=', False)],  # all active records
        ['id', 'name', 'image_1920'],
    )
    for img in images:
        img['url'] = f"/web/image/hotel.gallery/{img['id']}/image_1920"
    return {"images": images}


‚ö†Ô∏è I removed limit=5, because you need all images to chunk into groups of 5.

‚úÖ QWeb Template (chunk into 5 per slide)
<t t-name="hotel_management.hotel_gallery_template">
    <section class="hotel-gallery-section my-5">
        <div class="container">
            <h2 class="text-center mb-4 text-primary">Hotel Gallery</h2>
            <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="3000">
                <div class="carousel-inner">
                    <!-- Split images into groups of 5 -->
                    <t t-set="chunks" t-value="[(result.images[i:i+5]) for i in range(0, len(result.images), 5)]"/>

                    <t t-foreach="chunks" t-as="chunk" t-foreach-index="chunk_index">
                        <div class="carousel-item" t-att-class="chunk_index == 0 and 'active' or ''">
                            <div class="row">
                                <t t-foreach="chunk" t-as="img">
                                    <div class="col-md-2 col-6 mb-3">
                                        <img t-att-src="img.url"
                                             class="d-block w-100 rounded"
                                             t-att-alt="img.name"
                                             style="height:200px; object-fit:cover;"/>
                                        <div class="text-center mt-2">
                                            <small><t t-esc="img.name"/></small>
                                        </div>
                                    </div>
                                </t>
                            </div>
                        </div>
                    </t>
                </div>

                <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
    </section>
</t>

üîë How it works

[(result.images[i:i+5]) for i in range(0, len(result.images), 5)] ‚Üí creates chunks of 5 images.

Each chunk becomes a carousel-item (slide).

Inside each slide, we display the 5 images in a row with Bootstrap grid (col-md-2 = 6 per row, but last slot empty so only 5 show neatly).

üëâ Do you want me to also adjust the JS snippet so it passes a chunk function into the template instead of using Python list slicing inside QWeb (more reusable if you later want variable chunk sizes)?

Tools




k just returns an array of arrays. Example:

_.chunk([1,2,3,4,5,6,7], 4)
// => [[1,2,3,4], [5,6,7]]


So in your case:

var chunks = _.chunk(this.data, 4);


chunks[0] = first 4 courses

chunks[1] = next 4 courses, etc.

Since Odoo‚Äôs QWeb loop (t-foreach) doesn‚Äôt know which chunk is first, you‚Äôre manually doing:

chunks[0].is_active = true


That‚Äôs why the first slide becomes active.

‚úÖ If you want 5 per slide instead of 4

Just change the chunk size:

var chunks = _.chunk(this.data, 5);

‚úÖ If you want to know the index in QWeb

QWeb has t-foreach-index. You can use it like this:

<t t-foreach="chunks" t-as="chunk" t-foreach-index="i">
    <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
        ...
    </div>
</t>


This way you don‚Äôt need chunks[0].is_active = true in JS ‚Äî the template itself decides which is active.

üîë Final Fix (JS + Template)

JS (simpler):

start: function () {
    var chunks = _.chunk(this.data, 5); // group by 5
    this.$el.find('#courosel').html(
        qweb.render('elearning_course_snippet.elearning_snippet_carousel', {
            chunks: chunks
        })
    );
},


QWeb:

<t t-foreach="chunks" t-as="chunk" t-foreach-index="i">
    <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
        <div class="row">
            <t t-foreach="chunk" t-as="item">
                <!-- your course card -->
            </t>
        </div>
    </div>
</t>


üëâ Do you want me to rewrite your entire snippet/template with this cleaner t-foreach-index approach so you don‚Äôt need is_active in JS at all?

Tools

















üîπ JS (widget)
odoo.define('elearning_course_snippet.snippet', function(require) {
    'use strict';
    var PublicWidget = require('web.public.widget');
    var rpc = require('web.rpc');
    var core = require('web.core');
    var qweb = core.qweb;

    var Dynamic = PublicWidget.Widget.extend({
        selector: '.dynamic_snippet_blog',

        willStart: async function() {
            await rpc.query({
                route: '/latest_elearning_courses',
            }).then((data) => {
                this.data = data;
            });
        },

        start: function() {
            var chunks = _.chunk(this.data, 5); // group by 5 instead of 4
            this.$el.find('#courosel').html(
                qweb.render('elearning_course_snippet.elearning_snippet_carousel', {
                    chunks: chunks
                })
            );
        },
    });

    PublicWidget.registry.dynamic_snippet_blog = Dynamic;
    return Dynamic;
});

üîπ QWeb Template
<templates id="template" xml:space="preserve">
    <t t-name="elearning_course_snippet.elearning_snippet_carousel">

        <div id="course_carousel" class="container carousel slide" data-bs-ride="carousel" t-att-data-bs-interval="interval">

            <div class="carousel-inner row w-100 mx-auto" role="listbox">
                <t t-foreach="chunks" t-as="chunk" t-foreach-index="i">
                    <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
                        <div class="row">
                            <t t-foreach="chunk" t-as="item">
                                <div class="block span3 col-3">
                                    <div class="card-group">
                                        <div class="card">
                                            <img class="card-img-top"
                                                 t-attf-src="data:image/png;base64,{{item.image_1920}}"
                                                 style="padding: 0px; margin: 0px; height: 160px; width:305px;"/>
                                            <h5 class="mb-0"><t t-esc="item.name"/></h5>
                                            <a t-attf-href="/slides/{{item.id}}" class="btn btn-primary">
                                                Goto Courses
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </t>
                        </div>
                    </div>
                </t>
            </div>

        </div>

        <!-- Controls -->
        <a t-attf-href="#course_carousel" class="carousel-control-prev" data-bs-slide="prev" role="button" aria-label="Previous" title="Previous">
            <span class="fa fa-chevron-circle-left fa-2x"/>
            <span class="visually-hidden">Previous</span>
        </a>
        <a t-attf-href="#course_carousel" class="carousel-control-next" data-bs-slide="next" role="button" aria-label="Next" title="Next">
            <span class="fa fa-chevron-circle-right fa-2x"/>
            <span class="visually-hidden">Next</span>
        </a>

    </t>
</templates>


‚úÖ Changes I made to your code:

_.chunk(this.data, 5) instead of 4.

Removed chunks[0].is_active = true (no longer needed).

Used t-foreach-index="i" in QWeb to set active only for the first slide.

Do you also want me to adjust the Bootstrap grid classes (since 5 items in a row isn‚Äôt divisible evenly by col-3)?

Tools







ery snippet to work exactly like your elearning snippet, with the _.chunk(..., 5) and carousel slides.

I‚Äôll rewrite your hotel gallery code accordingly:

üîπ JS (hotel gallery widget)
/** @odoo-module **/
import publicWidget from "@web/legacy/js/public/public_widget";
import { rpc } from "@web/core/network/rpc";
import { renderToElement } from "@web/core/utils/render";

publicWidget.registry.HotelGallerySnippet = publicWidget.Widget.extend({
    selector: ".hotel-gallery-section",

    async willStart() {
        this.data = await rpc('/get_hotel_gallery', {});
    },

    start: function () {
        var chunks = _.chunk(this.data.images, 5); // group by 5
        this.$el.find('#hotelGalleryCarouselWrapper').html(
            renderToElement('hotel_management.hotel_gallery_template', {
                chunks: chunks
            })
        );
    },
});

üîπ QWeb Template (carousel with chunks of 5)
<template id="hotel_gallery_template" xml:space="preserve">
    <t t-name="hotel_management.hotel_gallery_template">
        <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="3000">
            <div class="carousel-inner">
                <t t-foreach="chunks" t-as="chunk" t-foreach-index="i">
                    <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
                        <div class="row">
                            <t t-foreach="chunk" t-as="img">
                                <div class="col-2"> <!-- 5 items per slide -->
                                    <div class="card border-0">
                                        <img t-att-src="img.url"
                                             class="d-block w-100 rounded"
                                             t-att-alt="img.name"
                                             style="height: 180px; object-fit: cover;"/>
                                        <div class="card-body text-center">
                                            <h6><t t-esc="img.name"/></h6>
                                        </div>
                                    </div>
                                </div>
                            </t>
                        </div>
                    </div>
                </t>
            </div>

            <!-- Controls -->
            <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </t>
</template>

üîπ Snippet placeholder (for website builder)
<odoo>
    <template id="hotel_gallery_snippet" name="Hotel Gallery Snippet">
        <section class="hotel-gallery-section my-5">
            <div class="container">
                <div id="hotelGalleryCarouselWrapper">
                    <div class="alert alert-info">
                        Hotel Gallery will load here (save and refresh to see images).
                    </div>
                </div>
            </div>
        </section>
    </template>

    <!-- Register snippet -->
    <template id="hotel_gallery_snippet_register" inherit_id="website.snippets">
        <xpath expr="//snippets[@id='snippet_groups']" position="inside">
            <t t-snippet="hotel_management.hotel_gallery_snippet"/>
        </xpath>
    </template>
</odoo>


‚úÖ Now your hotel gallery will:

Fetch images via /get_hotel_gallery.

Use _.chunk(..., 5) to group images into slides of 5.

Render a Bootstrap carousel, moving 5 images per slide (like your elearning snippet does).

Do you want me to also make it auto-slide every 3 seconds (like your earlier version), or keep it manual navigation only?

Tools



ChatGPT said:

Perfect üëç Since you are using Odoo 18, the snippet should follow the modern Odoo 18 JS module system (no qweb = core.qweb like v14‚Äì16).

I‚Äôll refactor your hotel gallery snippet into Odoo 18 style:

üîπ Python (controller)

No changes needed, except we‚Äôll return all images (not just limit=5):

@http.route('/get_hotel_gallery', type='json', auth="public", website=True)
def get_hotel_gallery(self):
    images = request.env['hotel.gallery'].sudo().search_read(
        [('id', '!=', False)],
        ['id', 'name', 'image_1920']
    )
    for img in images:
        img['url'] = f"/web/image/hotel.gallery/{img['id']}/image_1920"
    return {"images": images}

üîπ JS (Odoo 18 style)
/** @odoo-module **/
import { rpc } from "@web/core/network/rpc";
import { renderToElement } from "@web/core/utils/render";
import publicWidget from "@web/legacy/js/public/public_widget";

publicWidget.registry.HotelGallerySnippet = publicWidget.Widget.extend({
    selector: ".hotel-gallery-section",

    async willStart() {
        // Fetch gallery images
        this.data = await rpc('/get_hotel_gallery', {});
    },

    async start() {
        // Split into groups of 5
        const chunks = _.chunk(this.data.images, 5);

        // Render template with chunked data
        this.$el.find('#hotelGalleryCarouselWrapper').html(
            renderToElement("hotel_management.hotel_gallery_template", { chunks })
        );
    },
});

üîπ QWeb Template (carousel with chunks of 5)
<template id="hotel_gallery_template" xml:space="preserve">
    <t t-name="hotel_management.hotel_gallery_template">
        <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="3000">
            <div class="carousel-inner">
                <t t-foreach="chunks" t-as="chunk" t-foreach-index="i">
                    <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
                        <div class="row">
                            <t t-foreach="chunk" t-as="img">
                                <div class="col-2"> <!-- 5 items per slide -->
                                    <div class="card border-0">
                                        <img t-att-src="img.url"
                                             class="d-block w-100 rounded"
                                             t-att-alt="img.name"
                                             style="height: 180px; object-fit: cover;"/>
                                        <div class="card-body text-center">
                                            <h6><t t-esc="img.name"/></h6>
                                        </div>
                                    </div>
                                </div>
                            </t>
                        </div>
                    </div>
                </t>
            </div>

            <!-- Controls -->
            <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </t>
</template>

üîπ Snippet Placeholder (for website builder)
<odoo>
    <template id="hotel_gallery_snippet" name="Hotel Gallery Snippet">
        <section class="hotel-gallery-section my-5">
            <div class="container">
                <div id="hotelGalleryCarouselWrapper">
                    <div class="alert alert-info">
                        Hotel Gallery will load here (save & refresh to see images).
                    </div>
                </div>
            </div>
        </section>
    </template>

    <!-- Register snippet in Website Builder -->
    <template id="hotel_gallery_snippet_register" inherit_id="website.snippets">
        <xpath expr="//snippets[@id='snippet_groups']" position="inside">
            <t t-snippet="hotel_management.hotel_gallery_snippet"/>
        </xpath>
    </template>
</odoo>


‚úÖ Now in Odoo 18:

The controller gives all hotel images.

The JS widget chunks them into groups of 5.

The QWeb template makes each chunk a carousel slide.

The snippet placeholder ensures you can drag-drop it in Website Builder.

üëâ Do you want me to also add auto-slide every 3s (like your first version), or only manual arrows?

Tools









Uncaught Promise > _ is not defined

ChatGPT said:

Ah üëç that error comes from here:

const chunks = _.chunk(this.data.images, 5);


In Odoo 18, Lodash (_) is not globally available anymore. That‚Äôs why you get _ is not defined.

‚úÖ Fix Options
1. Import Lodash explicitly (recommended)

Odoo 18 has Lodash, but you must import it:

/** @odoo-module **/
import { rpc } from "@web/core/network/rpc";
import { renderToElement } from "@web/core/utils/render";
import publicWidget from "@web/legacy/js/public/public_widget";
import _ from "lodash";   // <-- add this

publicWidget.registry.HotelGallerySnippet = publicWidget.Widget.extend({
    selector: ".hotel-gallery-section",

    async willStart() {
        this.data = await rpc('/get_hotel_gallery', {});
    },

    async start() {
        const chunks = _.chunk(this.data.images, 5);  // now works
        this.$el.find('#hotelGalleryCarouselWrapper').html(
            renderToElement("hotel_management.hotel_gallery_template", { chunks })
        );
    },
});

2. Use a small custom chunk function (no lodash needed)

If you don‚Äôt want lodash at all:

function chunkArray(array, size) {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
        result.push(array.slice(i, i + size));
    }
    return result;
}


Then:

const chunks = chunkArray(this.data.images, 5);


üëâ Since you‚Äôre building a hotel gallery snippet, I recommend Option 2 (custom chunk function) so you don‚Äôt depend on lodash at all.

Do you want me to rewrite your JS snippet with the custom chunkArray (pure JavaScript) so you don‚Äôt need lodash?

Tools

dont depend on lash
ChatGPT said:

Perfect ‚úÖ then we‚Äôll drop Lodash and use a pure JS chunkArray helper.

Here‚Äôs your Hotel Gallery snippet rewritten for Odoo 18 without lodash:

üìå JS (no lodash)
/** @odoo-module **/
import { rpc } from "@web/core/network/rpc";
import { renderToElement } from "@web/core/utils/render";
import publicWidget from "@web/legacy/js/public/public_widget";

// helper function to split array into chunks of given size
function chunkArray(array, size) {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
        result.push(array.slice(i, i + size));
    }
    return result;
}

publicWidget.registry.HotelGallerySnippet = publicWidget.Widget.extend({
    selector: ".hotel-gallery-section",

    async willStart() {
        this.data = await rpc('/get_hotel_gallery', {});
    },

    async start() {
        if (this.data && this.data.images) {
            const chunks = chunkArray(this.data.images, 5);  // split into groups of 5
            this.$el.find('#hotelGalleryCarouselWrapper').html(
                renderToElement("hotel_management.hotel_gallery_template", { chunks })
            );
        }
    },
});

üìå QWeb Template
<template id="hotel_gallery_template" xml:space="preserve">
    <t t-name="hotel_management.hotel_gallery_template">
        <section class="hotel-gallery-section my-5">
            <div class="container">
                <h2 class="text-center mb-4 text-primary">Hotel Gallery</h2>

                <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="3000">
                    <div class="carousel-inner">
                        <t t-foreach="chunks" t-as="chunk" t-foreach-index="i">
                            <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
                                <div class="row">
                                    <t t-foreach="chunk" t-as="img">
                                        <div class="col-md-4 col-lg-3 mb-3">
                                            <img t-att-src="img.url"
                                                 class="d-block w-100 rounded"
                                                 t-att-alt="img.name"
                                                 style="height: 200px; object-fit: cover;"/>
                                            <div class="carousel-caption d-none d-md-block">
                                                <h5><t t-esc="img.name"/></h5>
                                            </div>
                                        </div>
                                    </t>
                                </div>
                            </div>
                        </t>
                    </div>

                    <!-- Controls -->
                    <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
        </section>
    </t>
</template>

üîë What Changed

Removed _.chunk ‚Üí replaced with chunkArray() helper.

Now 5 images per slide (can change number easily).

Carousel built in Odoo 18 style with t-foreach-index to set the first one active.

Do you also want me to update your Python controller (/get_hotel_gallery) so it doesn‚Äôt limit to only 5 records (since chunking already handles grouping)?

Tools


















_ is not defined happens because in Odoo 18 you no longer have lodash (_) globally available like older versions (v14‚Äì16).

That line:

const chunks = _.chunk(this.data.images, 5);


fails because _ doesn‚Äôt exist.

‚úÖ Fix in Odoo 18 (no lodash dependency)

You can implement your own simple chunkArray function:

function chunkArray(arr, size) {
    const result = [];
    for (let i = 0; i < arr.length; i += size) {
        result.push(arr.slice(i, i + size));
    }
    return result;
}

üîπ Updated JS for Hotel Gallery Snippet (Odoo 18)
/** @odoo-module **/
import { rpc } from "@web/core/network/rpc";
import { renderToElement } from "@web/core/utils/render";
import publicWidget from "@web/legacy/js/public/public_widget";

function chunkArray(arr, size) {
    const result = [];
    for (let i = 0; i < arr.length; i += size) {
        result.push(arr.slice(i, i + size));
    }
    return result;
}

publicWidget.registry.HotelGallerySnippet = publicWidget.Widget.extend({
    selector: ".hotel-gallery-section",

    async willStart() {
        // Fetch gallery images
        this.data = await rpc('/get_hotel_gallery', {});
    },

    async start() {
        // Split into groups of 5 without lodash
        const chunks = chunkArray(this.data.images, 5);

        // Render template with chunked data
        this.$el.find('#hotelGalleryCarouselWrapper').html(
            renderToElement("hotel_management.hotel_gallery_template", { chunks })
        );
    },
});

üîπ Why this works

_.chunk was lodash-specific.

In Odoo 18, you can‚Äôt rely on _ (not included anymore).

This replacement uses plain JavaScript to achieve the same result.

üëâ Now your gallery carousel should render 5 images per slide, grouped dynamically, without throwing _ is not defined.

Do you want me to also rewrite your QWeb template to match Odoo 18 modern style (no deprecated <t t-name> quirks)?v


ing üëÄ

The issue is with how facilities are being sent to the template.

üîπ Why you see not_available / IDs instead of names

When you call search_read() in your controller for rooms, the One2many/Many2many fields (facility_ids) are returned as lists of IDs (e.g., [1, 3, 7]), not their string names.

That‚Äôs why in your QWeb loop:

<t t-foreach="room.facilities" t-as="fac" t-key="fac.id">
    <span class="badge bg-secondary rounded-pill ms-3"><t t-esc="fac"/></span>
</t>


üëâ fac is just an integer ID, so Odoo prints 1, 3, not_available, etc.

‚úÖ Fix: Send facility names from controller

In your Python controller (where you return rooms), instead of just using facility_ids, you need to map them to their names:

@http.route('/get_hotel_rooms', auth="public", type='json', website=True)
def get_hotel_rooms(self):
    rooms = request.env['hotel.rooms'].sudo().search([])
    result = []
    for room in rooms:
        result.append({
            "id": room.id,
            "name": room.name,
            "bed": room.bed,
            "rent": room.rent,
            "state": room.state,
            "image": f"/web/image/hotel.rooms/{room.id}/image_1920" if room.image_1920 else "",
            "facilities": [fac.name for fac in room.facility_ids],  # ‚úÖ names instead of IDs
        })
    return {"rooms": result}

üîπ Then in your QWeb template

You don‚Äôt need fac.id because now it‚Äôs just a string list:

<p>
    <strong>Facilities:</strong>
    <t t-foreach="room.facilities" t-as="fac" t-key="fac">
        <span class="badge bg-secondary rounded-pill ms-3"><t t-esc="fac"/></span>
    </t>
</p>


‚úÖ Now your UI will correctly show:

Facilities: WiFi  |  AC  |  TV  |  Swimming Pool


instead of IDs or not_available.

Do you want me to also refactor your hotel.gallery controller the same way so that images return title + URL cleanly, instead of raw IDs?




















you want:

üëâ Your hotel project (rooms/gallery snippet) should follow the same dynamic snippet logic as the Best Seller Products example you shared, but adapted for hotel rooms.
That means:

Fetch hotel rooms from the controller (/get_hotel_rooms).

In JS, chunk the records (e.g., 3 or 4 per slide).

Render with QWeb template.

Integrate snippet into website.snippets so it shows in the website builder.

‚úÖ Step 1: Controller (controllers/main.py)

We‚Äôll enhance your /get_hotel_rooms to prepare human-readable bed/state and return JSON:

from odoo import http
from odoo.http import request


class WebsiteHotelBooking(http.Controller):

    @http.route('/get_hotel_rooms', type='json', auth="public", website=True)
    def get_hotel_rooms(self):
        rooms = request.env['hotel.rooms'].sudo().search([])
        result = []
        for room in rooms:
            result.append({
                "id": room.id,
                "name": room.name,
                "bed": room._fields['bed'].convert_to_export(room.bed, room),   # label
                "rent": room.rent,
                "state": room._fields['state'].convert_to_export(room.state, room),  # label
                "image": f"/web/image/hotel.rooms/{room.id}/image_1920" if room.image_1920 else "",
                "facilities": [f.name for f in room.facility_ids],
            })
        return {"rooms": result}

‚úÖ Step 2: Snippet Template (static/src/xml/hotel_snippet_templates.xml)
<?xml version="1.0" encoding="utf-8"?>
<templates xml:space="preserve">

    <t t-name="hotel_management.hotel_room_snippet_template">
        <div id="hotelRoomsCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="4000">
            <div class="carousel-inner">
                <t t-foreach="chunkData" t-as="chunk" t-foreach-index="i">
                    <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
                        <div class="row">
                            <t t-foreach="chunk" t-as="room">
                                <div class="col-md-4 mb-4">
                                    <div class="card h-100">
                                        <t t-if="room.image">
                                            <img t-att-src="room.image"
                                                 class="card-img-top"
                                                 t-att-alt="room.name"
                                                 style="height:200px;object-fit:cover;"/>
                                        </t>
                                        <div class="card-body">
                                            <h5 class="card-title"><t t-esc="room.name"/></h5>
                                            <p><strong>Bed:</strong> <t t-esc="room.bed"/></p>
                                            <p><strong>Rate:</strong> ‚Çπ<t t-esc="room.rent"/></p>
                                            <p>
                                                <strong>Facilities:</strong>
                                                <t t-foreach="room.facilities" t-as="fac">
                                                    <span class="badge bg-secondary me-1"><t t-esc="fac"/></span>
                                                </t>
                                            </p>
                                            <span class="badge bg-success"><t t-esc="room.state"/></span>
                                        </div>
                                    </div>
                                </div>
                            </t>
                        </div>
                    </div>
                </t>
            </div>

            <!-- Carousel Controls -->
            <button class="carousel-control-prev" type="button" data-bs-target="#hotelRoomsCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon"></span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#hotelRoomsCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon"></span>
            </button>
        </div>
    </t>

</templates>

‚úÖ Step 3: Snippet Placeholder (views/snippet.xml)
<?xml version="1.0" encoding="UTF-8" ?>
<odoo>
    <template id="hotel_room_snippet" name="Hotel Room Snippet">
        <section class="hotel-room-snippet my-5">
            <div class="container">
                <h2 class="text-center mb-4 text-primary">Our Rooms</h2>
                <div id="hotel_room_snippet_wrapper">
                    <div class="alert alert-info">Hotel rooms will load here...</div>
                </div>
            </div>
        </section>
    </template>

    <!-- Register in Website Builder -->
    <template id="hotel_room_snippet_register" inherit_id="website.snippets">
        <xpath expr="//div[@id='snippet_structure']" position="inside">
            <t t-snippet="hotel_management.hotel_room_snippet"/>
        </xpath>
    </template>
</odoo>

‚úÖ Step 4: JavaScript (static/src/js/hotel_room_snippet.js)
/** @odoo-module **/

import publicWidget from "@web/legacy/js/public/public_widget";
import { jsonrpc } from "@web/core/network/rpc_service";
import { renderToElement } from "@web/core/utils/render";

function chunk(array, size) {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
        result.push(array.slice(i, i + size));
    }
    return result;
}

publicWidget.registry.HotelRoomSnippet = publicWidget.Widget.extend({
    selector: ".hotel-room-snippet",

    async willStart() {
        const data = await jsonrpc('/get_hotel_rooms', {});
        this.rooms = data.rooms;
    },

    async start() {
        const refEl = this.$el.find("#hotel_room_snippet_wrapper");
        const chunkData = chunk(this.rooms, 3);  // show 3 per slide
        refEl.html(renderToElement("hotel_management.hotel_room_snippet_template", {
            chunkData,
        }));
    },
});

export default publicWidget.registry.HotelRoomSnippet;

‚úÖ Step 5: Manifest (__manifest__.py)
'data': [
    'views/snippet.xml',
],
'assets': {
    'web.assets_frontend': [
        'hotel_management/static/src/js/hotel_room_snippet.js',
        'hotel_management/static/src/xml/hotel_snippet_templates.xml',
    ],
},

üîπ Result

A dynamic snippet loads hotel rooms.

Uses chunk() ‚Üí 3 rooms per carousel slide.

Rooms show image, name, bed, rent, facilities, state.

Fully integrated into Website Builder Snippets.

Do you want me to also make a gallery snippet (images chunked 5 per slide) in the same style, so both Rooms & Gallery work uniformly?















I see the problem üëÄ

The error message:

The following modules are needed by other modules but have not been defined:
['@web/core/network/rpc_service']


means that @web/core/network/rpc_service doesn‚Äôt exist in Odoo 18.

In Odoo 18 frontend, you should use rpc from @web/core/network/rpc, not rpc_service.

üîπ Fix

Update your JS file to this:

/** @odoo-module **/

import publicWidget from "@web/legacy/js/public/public_widget";
import { rpc } from "@web/core/network/rpc";   // ‚úÖ correct import for Odoo 18
import { renderToElement } from "@web/core/utils/render";

function chunk(array, size) {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
        result.push(array.slice(i, i + size));
    }
    return result;
}

publicWidget.registry.HotelGallerySnippet = publicWidget.Widget.extend({
    selector: ".hotel-gallery-snippet",

    async willStart() {
        const data = await rpc('/get_hotel_gallery', {});   // ‚úÖ calling correct endpoint
        this.images = data.gallery || [];
    },

    async start() {
        const refEl = this.$el.find("#hotelGalleryCarouselWrapper");
        const chunkData = chunk(this.images, 5);
        refEl.html(renderToElement("hotel_management.hotel_gallery_snippet_template", {
            chunkData,
        }));
    },
});

export default publicWidget.registry.HotelGallerySnippet;

üîπ Key Fixes Applied

Changed

import { rpc } from "@web/core/network/rpc_service";


‚ûù

import { rpc } from "@web/core/network/rpc";


Renamed your widget properly:
You had:

var TopSellingProducts = publicWidget.registry.HotelRoomSnippet = ...


That‚Äôs wrong for a gallery snippet.
Now it‚Äôs:

publicWidget.registry.HotelGallerySnippet = ...


In willStart() you were using this.rooms = data.rooms; but your controller returns gallery, not rooms.
Fixed to this.images = data.gallery || [].

‚úÖ After this, the snippet should load gallery images properly without dependency errors.

Do you want me to also adjust your QWeb template so the id="hotelGalleryCarouselWrapper" matches, or are you already using that wrapper?

Tools
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

















üîé What‚Äôs happening

In your JS, you‚Äôre calling:

refEl.html(renderToElement("hotel_management.hotel_gallery_snippet_template", {
    chunkData,
}));


So your XML must have a template with exactly this name:

<t t-name="hotel_management.hotel_gallery_snippet_template">


and it must iterate over chunkData.

But from what you shared earlier, your XML still uses result.rooms instead of chunkData.

‚úÖ Corrected XML (gallery with chunks of 5)
<?xml version="1.0" encoding="utf-8" ?>
<templates xml:space="preserve">
    <t t-name="hotel_management.hotel_gallery_snippet_template">
        <section class="hotel-gallery-section my-5">
            <div class="container">
                <h2 class="text-center mb-4 text-primary">Hotel Gallery</h2>

                <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        <!-- loop over each chunk -->
                        <t t-foreach="chunkData" t-as="chunk" t-foreach-index="i">
                            <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
                                <div class="row">
                                    <!-- loop over each image inside the chunk -->
                                    <t t-foreach="chunk" t-as="img" t-key="img.id">
                                        <div class="col-md-2 mb-4">
                                            <div class="card">
                                                <t t-if="img.image">
                                                    <img t-att-src="img.image"
                                                         class="card-img-top rounded"
                                                         t-att-alt="img.name"
                                                         style="height: 150px; object-fit: cover;"/>
                                                </t>
                                                <div class="card-body p-2">
                                                    <p class="card-text text-center"><t t-esc="img.name"/></p>
                                                </div>
                                            </div>
                                        </div>
                                    </t>
                                </div>
                            </div>
                        </t>
                    </div>

                    <!-- controls -->
                    <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
        </section>
    </t>
</templates>

üîπ Key Fixes

Use chunkData instead of result.rooms.

Iterate properly:

Outer loop ‚Üí each chunk of 5 images.

Inner loop ‚Üí each image in that chunk.

Added a Bootstrap carousel wrapper so you can slide between groups of 5 images.

‚ö° With this, your gallery should now show images in groups of 5 per slide.

Do you want me to also add a fallback message like ‚ÄúNo images found‚Äù when gallery is empty?

Tools
ChatGPT can make mistakes. Check important info. See Cookie Preferences.






1Ô∏è‚É£ Your current snippet XML (static placeholder)
<template id="hotel_gallery_snippet" name="Hotel Gallery Snippet">
    <section class="hotel-gallery-snippet my-5">
        <div class="container">
            <h2 class="text-center mb-4 text-primary">Hotel Gallery</h2>
            <div id="hotel_gallery_snippet_wrapper">
                <div class="alert alert-info">Gallery will load here...</div>
            </div>
        </div>
    </section>
</template>


This is fine as a base snippet ‚Äî but it will never change unless JS renders the dynamic QWeb template.

2Ô∏è‚É£ What you need: dynamic template

Create a second template for rendering actual gallery items (the one I gave earlier with chunks):

<templates id="hotel_gallery_templates" xml:space="preserve">
    <t t-name="hotel_management.hotel_gallery_snippet_template">
        <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                <t t-foreach="chunkData" t-as="chunk" t-foreach-index="i">
                    <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
                        <div class="row">
                            <t t-foreach="chunk" t-as="img" t-key="img.id">
                                <div class="col-md-2 mb-4">
                                    <div class="card">
                                        <t t-if="img.image">
                                            <img t-att-src="img.image"
                                                 class="card-img-top rounded"
                                                 t-att-alt="img.name"
                                                 style="height: 150px; object-fit: cover;"/>
                                        </t>
                                        <div class="card-body p-2">
                                            <p class="card-text text-center"><t t-esc="img.name"/></p>
                                        </div>
                                    </div>
                                </div>
                            </t>
                        </div>
                    </div>
                </t>
            </div>

            <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </t>
</templates>

3Ô∏è‚É£ Your JS must render this template

Inside your widget:

/** @odoo-module **/
import publicWidget from "@web/legacy/js/public/public_widget";
import { rpc } from "@web/core/network/rpc_service";
import { renderToElement } from "@web/core/utils/render";

function chunk(array, size) {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
        result.push(array.slice(i, i + size));
    }
    return result;
}

publicWidget.registry.HotelGallerySnippet = publicWidget.Widget.extend({
    selector: ".hotel-gallery-snippet",

    async willStart() {
        const data = await rpc('/get_hotel_gallery', {});
        this.gallery = data.gallery || [];
    },

    async start() {
        const refEl = this.$el.find("#hotel_gallery_snippet_wrapper");
        if (!this.gallery.length) {
            refEl.html("<div class='alert alert-warning'>No images found.</div>");
            return;
        }
        const chunkData = chunk(this.gallery, 5);
        refEl.html(renderToElement("hotel_management.hotel_gallery_snippet_template", {
            chunkData,
        }));
    },
});

4Ô∏è‚É£ Check manifest

Make sure both JS and XML are in your __manifest__.py:

'assets': {
    'web.assets_frontend': [
        'hotel_management/static/src/js/hotel_gallery_snippet.js',
        'hotel_management/static/src/xml/hotel_gallery_snippet_templates.xml',
    ],
},


‚úÖ With this setup:

First, your base snippet (hotel_gallery_snippet) places the section on the page.

Then, JS fetches gallery data via /get_hotel_gallery.

If images exist ‚Üí JS replaces ‚ÄúGallery will load here‚Ä¶‚Äù with the carousel view (hotel_gallery_snippet_template).

üëâ Question: Do you want me to also add debug console.log() inside JS so you can confirm that the data reaches the QWeb template before rendering?

Tools
ChatGPT can make mistakes. Check im
































































?xml version="1.0" encoding="utf-8" ?>
<templates xml:space="preserve">
    <t t-name="hotel_management.hotel_gallery_snippet_template">
        <section class="hotel-gallery-section my-5">
            <div class="container">
                <h2 class="text-center mb-4 text-primary">Hotel Gallery</h2>

                <div id="hotelGalleryCarousel" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        <!-- loop over each chunk -->
                        <t t-foreach="chunkData" t-as="chunk" t-foreach-index="i">
                            <div t-att-class="i == 0 ? 'carousel-item active' : 'carousel-item'">
                                <div class="row">
                                    <!-- loop over each image inside the chunk -->
                                    <t t-foreach="chunk" t-as="img" t-key="img.id">
                                        <div class="col-md-2 mb-4">
                                            <div class="card">
                                                <t t-if="img.image">
                                                    <img t-att-src="img.image"
                                                         class="card-img-top rounded"
                                                         t-att-alt="img.name"
                                                         style="height: 150px; object-fit: cover;"/>
                                                </t>
                                                <div class="card-body p-2">
                                                    <p class="card-text text-center"><t t-esc="img.name"/></p>
                                                </div>
                                            </div>
                                        </div>
                                    </t>
                                </div>
                            </div>
                        </t>
                    </div>

                    <!-- controls -->
                    <button class="carousel-control-prev" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#hotelGalleryCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
        </section>
    </t>
</templates>




















