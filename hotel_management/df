rect way to handle food_category_ids and food_item_ids
1. In Controller

When confirming order, you should accept category + food items from the frontend (JS side) and write them to the order.

Example:

@http.route('/food/confirm_order', type='json', auth='user', website=True)
def confirm_order(self, categories=None, food_items=None):
    partner = request.env.user.partner_id

    # fetch draft order
    order = request.env['order.food'].sudo().search([
        ('guest_id', '=', partner.id),
        ('order_status', '=', 'draft')
    ], limit=1)

    if not order:
        return {"success": False, "error": "No draft order found"}

    # ✅ Add categories if provided
    if categories:
        order.write({
            'food_category_ids': [(6, 0, categories)]  # replace with list of category IDs
        })

    # ✅ Add food items if provided
    if food_items:
        order.write({
            'food_item_ids': [(6, 0, food_items)]  # replace with list of food IDs
        })

    # ✅ Finally confirm order
    order.action_confirm()

    return {"success": True, "order_id": order.id}

2. In OrderFood model

You already have _compute_food_item_ids that dynamically links food_item_ids from food_category_ids.
But if you also want to allow manual assignment (instead of only computed), you should remove compute and store=True from food_item_ids.

Change:

food_item_ids = Many2many('hotel.food', string="Food Item", compute="_compute_food_item_ids", store=True, readonly=False)


To:

food_item_ids = Many2many('hotel.food', string="Food Item")


And keep _compute_food_item_ids only if you want an auto-suggest feature. In that case, mark it @api.onchange instead of @api.depends:

@api.onchange('food_category_ids')
def _onchange_food_category_ids(self):
    for record in self:
        if record.food_category_ids:
            record.food_item_ids = self.env['hotel.food'].search([
                ('food_id', 'in', record.food_category_ids.ids)
            ])
        else:
            record.food_item_ids = [(5, 0, 0)]

3. In OrderFoodList

When creating lines in confirm/add-to-cart, use:

request.env['order.list'].sudo().create({
    'name': food.name,
    'quantity': item.get('quantity', 1),
    'price': food.price,
    'description': food.description,
    'food_list_id': order.id,
    'accommodation_id': room.id,
    'room_id': room.room_id.id if room else False,
})


✅ With this:

Categories (food_category_ids) are stored directly.

Food items (food_item_ids) are also stored (either auto-populated from categories, or manually added).

Portal controller can pass both category IDs and food IDs.

Do you want me to also show you how to update your portal template (QWeb) so that when the user selects a category, it auto-filters and shows only related foods before adding them to cart?

Tools